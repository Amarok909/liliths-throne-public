DEV STAGES
X	create basic image mathmatically
X	create complex 
X	create basic functions
		get image
		find random image
X	create tiled images
X	create overwrite system
X		puts a nice ribbon on images
X		adds 2dGraphics images
X		adds math defined square
X		adds rotated image
		adds offcentre rotated image
			can achive by creating a rotated image, the layering at a point
X		adds scaled image

	create collage images
X		random shapes
		vaguely anthropomorphic
	rework custom image filing systems
		make more unique so no overlapping npcs
		make so Paperdoll is designated artists
	create primitive limbs, body, head
		rip these from jam's work, temp measure until skills develop or other artists gained
	create collage with primitiv body parts manally

	create assembly system	
		most likely a class of its own, will initiate new DollPart class instances
		ability to read xml files
	create primitive paperdoll
	create more primitive body parts
	test generation of images
	refine code to remove inefficencies
	rework Paperdoll credit system
		allow Paperdoll cretis to be updated with artists who supply their own skins

	add articulation to image primitives
	rework assembly system to suport new articulation

	artwork detail for fat, muscle, hair

	embed into text

	minor animations

	sex animations

GENERAL NOTES
	All images should be refrenced from their top left corners, this is what java uses
	need to figure out how to deal with nested positioning systems for body parts
		find math for rotating rectangcle about positioning
	need to figure out trimming image math
		note: the corners are a rectangle's most distaant points
	need to check if the methods perform destructive actions or not. idealy, data should be preserved and not perminantly modified by methods
		java appers to be non destructive: see https://stackoverflow.com/a/40523 for refrence
	there are two conflicting needs, to have all body part images positioned correctly relative to their parent, and to have the images printed in corect order so it looks proper
	determin wether the structure should be stems looking for parent nodes, or roots looking for child nodes
	create a system for Paperparts which let them get their parent/child nodes
		eg Paperpart leftarm.getParent() returns Paperpart torso
		   Paperpart waist.getChild(0) returns Paperpart torso
		   Paperpart waist.getChild(0).getChild(0) returns Paperpart leftarm
		this might be achived by a tree method of new Paperparts, skipping the need for Paperbody all together

DATA FLOW
	the end goal is a avatar of a given character
	this is created by assembling different pody part images and then flatning
	each body part image is selected from a folder containing all the images for that species

	so from start to end

		identify the character
		find the file containing the needed body part images
		

		create a set of body part images arranged
		turn/flatten this set into a single image
		save the image to the character's image folder

RESOURCES
	https://www.oreilly.com/library/view/learning-java-4th/9781449372477/ch06s01.html
	https://www.oreilly.com/library/view/learning-java-4th/9781449372477/ch06s02.html
	https://teamtreehouse.com/community/difference-between-implementing-and-importing